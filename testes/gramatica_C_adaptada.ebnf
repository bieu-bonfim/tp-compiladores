- Start Symbol
// a definir

- Statement

stmt-list         ::= { stmt }

stmt              ::= null-stmt
                  |return-stmt
                  |continue-stmt
                  |break-stmt
                  |if-stmt
                  |while-stmt
                  |goto-stmt

block-stmt        ::= "_/" stmt-list "\_"

null-stmt         ::= "..."

return-stmt       ::= kw-return expr "..."

continue-stmt     ::= kw-continue "..."

break-stmt        ::= kw-break "..."

if-stmt           ::= kw-if expr block-stmt [kw-else block-stmt]

while-stmt        ::= kw-while expr block-stmt

goto-stmt         ::= kw-goto identifier "..."

switch-stmt       ::= kw-switch expr block-stmt

decl-stmt         ::= assign-list '...'
                  | typ-defn '...'
                  | func-sign '...'

+Syntax::Assignment

assign-stmt       ::= dynamic-assign
                  | const-assign

dynamic-assign    ::= [ typ-decl ] identifier [ "sera " expr ]

const-assign      ::= [ typ-decl ] identifier [ "sera " const-literal ]

assign-list       ::= assign-stmt { ', ' assign-stmt }

- Identifiers




- Declare Function

func-decl         ::=  func-sign block-stmt

func-sign         ::= "preparar " type identifier [", componentes: " params] "."


- Types

typ-base          ::= kw-void
                  |kw-int
                  |kw-char
                  |kw-float
                  |kw-double
                  |kw-bool
                  |kw-short
                  |kw-long
                  |typ-literal
                  |typ-enum
                  |typ-struct
                  |typ-union

typ-literal       ::= typ-enum-lit
                  |typ-struct-lit
                  |typ-union-lit


typ-enum          ::= kw-enum typ-alias

typ-enum-lit	    ::= "_/" typ-enum-field { ',' typ-enum-field } "\_"

typ-enum-field    ::= identifier [ "será escrito como o glifo " int-const ]


typ-struct        ::= kw-struct typ-alias

typ-struct-lit    ::= "_/" typ-struct-field { '...' typ-struct-field } "\_"

typ-struct-field    ::= typ-decl identifier


typ-union         ::= kw-union typ-alias

typ-union-lit	    ::= "_/" typ-union-field { '...' typ-union-field } "\_"

typ-union-field   ::= typ-decl identifier


typ-id-pair       ::= typ-decl [ kw-const ] [ '*' ] identifier

typ-alias         ::= identifier


typ-defn          ::= kw-typedef typ-base typ-alias

typ-decl          ::= [ typ-qualifier ] [ '*' ] typ-base

typ-qualifier     ::= kw-const




Grammar::Lexical

+Lexical::Keywords

kw-bool           ::= "axioma"
kw-break          ::= "cumprir profecia"
kw-case           ::= "caso venha a ser"
kw-char		        ::= "runa"
kw-const          ::= "imutável"
kw-continue	      ::= "manter profecia"
kw-default	      ::= "caso trivial"
kw-double	        ::= "arquifractal"
kw-else		        ::= "caso contrário"
kw-enum 	        ::= "glifos em"
kw-float 	        ::= "fractal"
kw-goto 	        ::= "translocar para"
kw-if 		        ::= "seria"
kw-int 		        ::= "glifo"
kw-long 	        ::= "arquiglifo"
kw-return 	      ::= "regressum"
kw-short 	        ::= "glifo menor"
kw-sizeof 	      ::= #TODO
kw-struct 	      ::= "componentes em"
kw-switch 	      ::= "profetizar sob"
kw-typedef 	      ::= "transmutar"
kw-union 	        ::= "conjuntura em"
kw-void 	        ::= "nulo"
kw-while 	        ::= "enquanto"



+Lexical::Literals

const-literal     ::= null-const
                  |str-const
                  |char-const
                  |int-const
                  |float-const
                  |bool-const
                  |expr-const

null-const        ::= "Vazio"

str-const         ::= '"' { character } '"'

char-const        ::= "'" character "'"

int-const         ::= integer

float-const       ::= rational

num-const         ::= integer | rational

bool-const        ::= true | false

expr-const        ::= int-const { (plus | minus | times | div | mod) int-const }

plus              ::= "fundido a "
minus             ::= "extraido de "
times             ::= "replicado por "
div               ::= "fragmentado em "
mod               ::= "transmoglifado por "

lower-case        ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'

upper-case        ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'

letter            ::= lower-case | upper-case | accent

special_char      ::= "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "+" | "=" | "{" | "}" | "[" | "]" | "|" | "\" | ":" | ";" | "'" | "<" | ">" | "," | "." | "?" | "/" | "~" | "`"

accent            ::= "á" | "é" | "í" | "ó" | "ú" | "â" | "ê" | "î" | "ô" | "û" | "ã" | "õ" | "ç"

character         ::= letter | digit | special_char

non-zero          ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

digit             ::= 0 | non-zero

integer           ::= dec-digit

dec-digit         ::= digit { digit }

rational            ::= dec-digit "." dec-digit

identifier        ::= letter { letter | digit }

true            ::= "veritas"
false           ::= "falsum"
