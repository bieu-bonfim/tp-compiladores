START               ::=  { DECL-STMT | FUNCTION }

VARIABLE            ::=  ID [ INDEX-OPT ]

FUNCTION            ::=  'preparar' TYPE ID ', componentes:' ARGS STMT-BLOCK

FUNCTION-SIGNATURE  ::=  'preparar' TYPE ID ', componentes:' ARGS '...'

FUNCTION-CALL       ::=  'conjurar' ID ' [' PARAMS ']'

ARGS                ::=  [ ARG { ',' ARG } ]

ARG                 ::=  TYPE ID

PARAMS              ::=  [ PARAM { ',' PARAM } ]

PARAM               ::=  EXPR

STMT-BLOCK          ::=  '_/' STMTS '\_'

STMTS               ::=  { STMT }

STMT                ::=   NULL-STMT
                      |   RETURN-STMT
                      |   CONTINUE-STMT
                      |   BREAK-STMT
                      |   IF-STMT
                      |   WHILE-STMT
                      |   GOTO-STMT
                      |   DECL-STMT

NULL-STMT           ::=  '...'

RETURN-STMT         ::=  'regressum ' EXPR '...'

CONTINUE-STMT       ::=  'manter profecia' '...'

BREAK-STMT          ::=  'cumprir profecia' '...'

IF-STMT             ::=  'se ' EXPR '...' STMT-BLOCK { 'caso contrario' [ 'se' EXPR '...' ] STMT-BLOCK }

WHILE-STMT          ::=  'enquanto ' EXPR '...' STMT-BLOCK

GOTO-STMT           ::=  'translocar para ' ID '...'

SWITCH-STMT         ::=  'profetizar sob ' EXPR '...' SWITCH-BLOCK

SWITCH-BLOCK        ::=  '_/' SWITCH-STMTS '\_'

SWITCH-STMTS        ::=  { CASE CASE-STMT } [ 'caso trivial, ' CASE-STMT]

CASE                ::=  'caso venha a ser ' EXPR ', '

CASE-STMT           ::=  { STMT } BREAK-STMT

DECL-STMT           ::= TYPE-DEFINITION '...'
                      |  ASSIGNMENTS '...'
                      |  FUNCTION-SIGNATURE '...'

PLUS                ::= 'fundido a '
MINUS               ::= 'extraido de '
TIMES               ::= 'replicado por '
DIV                 ::= 'fragmentado em '
MOD                 ::= 'transmoglifado por ' 

EXPR                ::=  TERM { OPERATOR TERM }

TERM                ::=  FACTOR { OPERATOR FACTOR }

FACTOR              ::=  '(' EXPR ')'
                      |  VARIABLE
                      |  INTEGER
                      |  RATIONAL
                      
OPERATOR            ::=  ARIT | REL | LOGIC

ARIT                ::=  PLUS
                      |  MINUS
                      |  TIMES
                      |  DIV
                      |  MOD

REL                 ::=  #TODO

LOGIC               ::=  #TODO

TYPE                ::=  'runa'
                      |  'glifo'
                      |  'arquiglifo'
                      |  'fractal'
                      |  'arquifractal'
                      |  'glifo menor'
                      |  'nulo'
                      |  'axioma'
                      |  ENUM-DEFINITION
                      |  STRUCT-DEFINITION
                      |  UNION-DEFINITION
                      |  TYPE-ENUM
                      |  TYPE-STRUCT
                      |  TYPE-UNION

TYPE-QUALIFIER      ::=  'imutavel'
                      |  'volatil'

ENUM-DEFINITION     ::=  'glifos' ' em ' ID '_/' ENUM-FIELDS '\_'

ENUM-FIELDS         ::=  ENUM-FIELD { ',' ENUM-FIELD }

ENUM-FIELD          ::=  ID [ 'sera ' DEC-DIGIT ]

STRUCT-DEFINITION   ::=  'componentizacao' ' em ' [ ID ] '_/' STRUCT-FIELDS '\_'

STRUCT-FIELDS       ::=  STRUCT-FIELD { '...' STRUCT-FIELD }

STRUCT-FIELD        ::=  TYPE-DECL ID

UNION-DEFINITION    ::=  'conjuntura' ' em ' ID '_/' UNION-FIELDS '\_'

UNION-FIELDS        ::=  UNION-FIELD { '...' UNION-FIELD }

UNION-FIELD         ::=  TYPE-DECL ID

TYPE-DEFINITION     ::=  'transmutar ' TYPE ID

TYPE-ENUM           ::=  'glifos' ID

TYPE-STRUCT         ::=  'componentizacao' ID

TYPE-UNION          ::=  'conjuntura' ID


ASSIGNMENTS         ::=  ASSIGNMENT { ', ' ASSIGNMENT }

ASSIGNMENT          ::=  [ TYPE ] VARIABLE [ 'sera' EXPR ]

INDEX-OPT           ::=  '<' EXPR '>'





NON-ZERO            ::=  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

DIGIT               ::=  '0' | NON-ZERO

DEC-DIGIT           ::=  DIGIT { DIGIT }

INTEGER             ::=  DEC-DIGIT

RATIONAL            ::=  DEC-DIGIT '.' DEC-DIGIT

LOWER-CASE          ::=  'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'

UPPER-CASE          ::=  'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'

SPECIAL-CHAR        ::=  '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '_' | '+' | '=' | '{' | '}' | '[' | ']' | '|' | '\' | ':' | ';' | "'" | '<' | '>' | ',' | '.' | '?' | '/' | '~' | '`'

ACCENT              ::=  'á' | 'é' | 'í' | 'ó' | 'ú' | 'â' | 'ê' | 'î' | 'ô' | 'û' | 'ã' | 'õ' | 'ç'

LETTER              ::=  LOWER-CASE | UPPER-CASE | ACCENT

CHAR                ::=  LETTER | DIGIT | SPECIAL-CHAR

ID                  ::=  ( LETTER | '_' ) { LETTER | DIGIT | '_' }

TRUE                ::=  'veritas'

FALSE               ::=  'falsum'

BOOL                ::=  TRUE | FALSE

NULL-CONST          ::=  'Vazio'

STR-CONST           ::=  '"' { CHAR } '"'

CHAR-CONST          ::=  "'" CHAR "'"